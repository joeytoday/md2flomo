import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

console.log('Starting esbuild...');
console.log('Current working directory:', process.cwd());

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
console.log('Production mode:', prod);

// 使用build而不是context，简化流程
try {
	const result = await esbuild.build({
		banner: {
			js: banner,
		},
		entryPoints: ["main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins],
		format: "cjs",
		target: "es2018",
		logLevel: "debug", // 使用更详细的日志级别
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outfile: "main.js",
		minify: prod,
	});
	console.log('Build successful! Output file:', 'main.js');
} catch (error) {
	console.error('Build failed:', error);
	process.exit(1);
}

if (!prod) {
	console.log('Watching for changes...');
	const watcher = await esbuild.context({
		// 相同的配置
		banner: {
			js: banner,
		},
		entryPoints: ["main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins],
		format: "cjs",
		target: "es2018",
		logLevel: "debug",
		sourcemap: "inline",
		treeShaking: true,
		outfile: "main.js",
		minify: false,
	});
	await watcher.watch();
} else {
	process.exit(0);
}
